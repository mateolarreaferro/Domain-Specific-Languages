# test_ast.py

from parse import parse
import pickle


if __name__ == "__main__":
    # AST tests

    # List of example files to test
    examples = ["examples/associativity.mat",
     "examples/expression.mat",
     "examples/function.mat",
     "examples/let.mat",
     "examples/precedence.mat"]

    # Dictionary to store the ASTs generated by the parser
    asts = {}
    print("Parsing example files...")
    for example in examples:
        print(f"  Parsing: {example}")
        try:
            asts[example] = parse(example)
        except Exception as e:
            print(f"\n!!! PARSING FAILED for {example} !!!")
            print(f"Error: {e}")
            # Optionally re-raise or exit if parsing failure should stop tests
            # raise e
            asts[example] = None # Mark as failed

    # Load the pre-computed correct ASTs
    print("\nLoading correct ASTs from sample_asts.pickle...")
    try:
        with open("sample_asts.pickle", "rb") as file:
            correct_asts = pickle.load(file)
        print("Correct ASTs loaded.")
    except FileNotFoundError:
        print("\n!!! ERROR: sample_asts.pickle not found! Cannot run tests. !!!")
        exit(1)
    except Exception as e:
        print(f"\n!!! ERROR loading sample_asts.pickle: {e} !!!")
        exit(1)


    print("\nComparing generated ASTs with correct ASTs...")
    # Loop to compare generated ASTs with correct ones
    all_passed = True
    for example in examples:
        print(f"Testing: {example}")

        # Skip comparison if parsing failed for this example
        if asts.get(example) is None:
            print(" -> SKIPPED (Parsing failed earlier)")
            all_passed = False
            continue

        # Ensure the example key exists in both dictionaries before accessing
        if example not in asts:
            # This case should ideally not happen if parsing succeeded
            print(f"Error: Generated AST mysteriously missing for {example}")
            all_passed = False
            continue
        if example not in correct_asts:
            print(f"Error: Correct AST missing in pickle for {example}")
            all_passed = False
            continue

        generated_ast = asts[example]
        correct_ast = correct_asts[example]

        # Compare the ASTs
        if generated_ast != correct_ast:
            all_passed = False # Mark that at least one test failed
            print("\n----------------------------------------")
            print(f"AST MISMATCH FOUND IN: {example}")
            print("----------------------------------------")
            # Use repr() for potentially more detailed output if __str__ is simple
            print("GENERATED AST:")
            print(repr(generated_ast))
            print("----------------------------------------")
            print("EXPECTED AST (from pickle):")
            print(repr(correct_ast))
            print("----------------------------------------\n")
            # Raise the assertion error AFTER printing to ensure output is seen
            assert generated_ast == correct_ast, f"{example} failed"
        else:
            print(" -> AST Matches OK")

    # Final result message
    if all_passed:
        print("\nAll tests passed!")
    else:
        print("\nSome tests failed.")

