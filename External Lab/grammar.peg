# ─────────────────────────────────────────────────────────────────────────────
# Program Structure
# ─────────────────────────────────────────────────────────────────────────────
# The parser must consume the entire file; we do NOT allow trailing junk.
program     = (statement / comment / emptyline)*

# ─────────────────────────────────────────────────────────────────────────────
# Lexical Elements
# ─────────────────────────────────────────────────────────────────────────────
ws          = ~r"\s*"               # zero or more whitespace characters
emptyline   = ws+                   # a blank line (whitespace only)
name        = ~r"[a-zA-Z][-\w]*" ws # identifier: letter followed by letters/digits/_/-
number      = ~r"[0-9]+" ws         # integer literal

# ─────────────────────────────────────────────────────────────────────────────
# Comments
# ─────────────────────────────────────────────────────────────────────────────
comment     = "#" ~r".*" ws         # ignore everything after '#' to end‑of‑line

# ─────────────────────────────────────────────────────────────────────────────
# Statements
# ─────────────────────────────────────────────────────────────────────────────
statement   = print_stmt
            / let_stmt
            / func_def
            / return_stmt
            / expr_stmt

# Variable binding  ──  let x = expr;
let_stmt    = "let" ws name ws "=" ws expr ";" ws

# Expression statement ──  expr ;
expr_stmt   = expr ";" ws

# Print statement ──  print(expr, expr, …);
print_stmt  = "print" ws "(" ws expr ("," ws expr)* ws ")" ws ";" ws

# ─────────────────────────────────────────────────────────────────────────────
# Function definitions
# ─────────────────────────────────────────────────────────────────────────────
func_def    = "def" ws name ws "(" ws params? ")" ws ("->" ws type)? ws
              "{" ws func_body "}" ws

params      = param ("," ws param)*
param       = name ws ":" ws type

# Types  ──  Mat(r, c)
type        = "Mat(" ws dim ws "," ws dim ws ")" ws
dim         = name / number

# Function body can contain statements, comments, or blank lines, plus
# an optional return at the end.
func_body   = (statement / comment / emptyline)*
return_stmt = "return" ws expr ";" ws

# ─────────────────────────────────────────────────────────────────────────────
# Expressions
# ─────────────────────────────────────────────────────────────────────────────
expr        = add                              # top‑level rule

add         = mul (("+" / "-") ws mul)*        # left‑associative
mul         = atom (("*") ws atom)*            # left‑associative

# ─────────────────────────────────────────────────────────────────────────────
# Atoms and literals
# ─────────────────────────────────────────────────────────────────────────────
atom            = matrix
                / vector
                / number_literal
                / func_call
                / var

var             = name                         # handled as Variable in visitor
number_literal  = number

# Function calls
func_call       = name ws "(" ws arguments? ")" ws
arguments       = expr ("," ws expr)*

# Matrix & vector literals
matrix          = "[" ws vector ("," ws vector)* "]" ws
vector          = "[" ws expr ("," ws expr)* "]" ws